#!/usr/bin/env node

'use strict';

var path = require('path'),
	spawn = require('child_process').spawn,
	fs = require('fs');


var packageJson = require(path.join(process.cwd(), 'package.json')),
	scripts = packageJson.scripts,
	isWin = process.platform.substring(0, 3) === 'win';

var scriptArgs = process.argv.slice(2);

function exit(code) {
	function done() {
		if (!(draining--)) {
			process.exit(code);
		}
	}

	var draining = 0;
	var streams = [process.stdout, process.stderr];

	streams.forEach(function(stream){
		draining += 1;
		stream.write('', done);
	});

	done();
}

function extend(dst, src) {
	for (var key in src) {
		dst[key] = src[key];
	}
	return dst;
}

if (!scriptArgs.length) {
	console.log('Scripts for "%s":', packageJson.name);
	Object.keys(scripts).forEach(function(scriptName) {
		console.log('  %s', scriptName);
		console.log('    %s', scripts[scriptName]);
	});
	return exit(0);
}

if (scriptArgs.indexOf('--completion') >= 0) {
	console.log(
		fs.readFileSync(path.join(__dirname, 'completion.sh'), 'utf8')
	);
	return exit(0);
}

var scriptName = scriptArgs.shift();

if (scriptName in scripts === false) {
	console.error(
		'Unknown script "%s" for package "%s"',
		scriptName, packageJson.name
	);
	return exit(1);
}

var script = scripts[scriptName];

console.log('> nrun %s', scriptName);

script = script + ' ' + scriptArgs.map(function(arg) {
	if (isWin) {
		return '"' + arg.replace(/(\\*)"/g, '$1$1\\"')
			.replace(/(\\*)$/, '$1$1') + '"';
	} else {
		return '"' + arg.replace(/"/g, '\\"') + '"';
	}
}).join(' ');

console.log('> %s', script);

var cmd, args,
	spawnOpts = {
		stdio: 'inherit',
		env: extend({}, process.env)
	};

// add binaries to path
spawnOpts.env.PATH = process.env.PATH + path.delimiter + 'node_modules/.bin';

if (isWin) {
	cmd = process.env.comspec || 'cmd.exe';
	args = ['/s', '/c', '"' + script + '"'];
	spawnOpts.windowsVerbatimArguments = true;
} else {
	cmd = process.env.SHELL || '/bin/sh';
	args = ['-c', script];
}

spawn(cmd, args, spawnOpts)
	.on('close', exit);
