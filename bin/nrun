#!/usr/bin/env node

'use strict';

var path = require('path'),
	spawn = require('child_process').spawn;


var packageJson = require(path.join(process.cwd(), 'package.json')),
	scripts = packageJson.scripts,
	isWin = process.platform.substring(0, 3) === 'win';

var scriptArgs = process.argv.slice(2);

if (!scriptArgs.length) {
	console.log('Scripts for "%s":', packageJson.name);
	Object.keys(scripts).forEach(function(scriptName) {
		console.log('  %s', scriptName);
		console.log('    %s', scripts[scriptName]);
	});
	return;
}

var scriptName = scriptArgs.shift();

if (scriptName in scripts === false) {
	console.error(
		'Unknown script "%s" for package "%s"',
		scriptName, packageJson.name
	);
	return;
}

var script = scripts[scriptName];

console.log('> nrun %s', scriptName);

script = script + ' ' + scriptArgs.map(function(arg) {
	if (isWin) {
		return '"' + arg.replace(/(\\*)"/g, '$1$1\\"')
			.replace(/(\\*)$/, '$1$1') + '"';
	} else {
		return '"' + arg.replace(/"/g, '\\"') + '"';
	}
}).join(' ');

console.log('> %s', script);

var cmd, args,
	spawnOpts = {stdio: 'inherit'};

if (isWin) {
	cmd = process.env.comspec || 'cmd.exe';
	args = ['/s', '/c', '"' + script + '"'];
	spawnOpts.windowsVerbatimArguments = true;
} else {
	cmd = '/bin/sh';
	args = ['-c', script];
}

var cmdSpawn = spawn(cmd, args, spawnOpts);

cmdSpawn.on('close', function(code) {
	process.exit(code);
});
